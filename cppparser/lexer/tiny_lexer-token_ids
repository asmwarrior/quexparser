/* -*- C++ -*- vim: set syntax=cpp:
 * PURPOSE: File containing definition of token-identifier and
 *          a function that maps token identifiers to a string
 *          name.
 *
 * NOTE: This file has been created automatically by Quex.
 *       Visit quex.org for further info.
 *
 * DATE: Sat May 28 18:01:09 2011
 *
 * (C) 2005-2010 Frank-Rene Schaefer
 * ABSOLUTELY NO WARRANTY                                           */
#ifndef __QUEX_INCLUDE_GUARD__AUTO_TOKEN_IDS___QUEX____TOKEN__
#define __QUEX_INCLUDE_GUARD__AUTO_TOKEN_IDS___QUEX____TOKEN__

#ifndef __QUEX_OPTION_PLAIN_C
#   include<cstdio> 
#else
#   include<stdio.h> 
#endif

/* The token class definition file can only be included after the two token identifiers have
 * been defined. Otherwise, it would rely on default values. */
#include "tiny_lexer-token"

const QUEX_TYPE_TOKEN_ID TKN_AND            = ((QUEX_TYPE_TOKEN_ID)5);
const QUEX_TYPE_TOKEN_ID TKN_AND_EQ         = ((QUEX_TYPE_TOKEN_ID)6);
const QUEX_TYPE_TOKEN_ID TKN_ARROW          = ((QUEX_TYPE_TOKEN_ID)7);
const QUEX_TYPE_TOKEN_ID TKN_ASM            = ((QUEX_TYPE_TOKEN_ID)8);
const QUEX_TYPE_TOKEN_ID TKN_ASM_EXT        = ((QUEX_TYPE_TOKEN_ID)9);
const QUEX_TYPE_TOKEN_ID TKN_ASSIGN         = ((QUEX_TYPE_TOKEN_ID)10);
const QUEX_TYPE_TOKEN_ID TKN_AUTO           = ((QUEX_TYPE_TOKEN_ID)11);
const QUEX_TYPE_TOKEN_ID TKN_BITAND         = ((QUEX_TYPE_TOKEN_ID)12);
const QUEX_TYPE_TOKEN_ID TKN_BITOR          = ((QUEX_TYPE_TOKEN_ID)13);
const QUEX_TYPE_TOKEN_ID TKN_BREAK          = ((QUEX_TYPE_TOKEN_ID)14);
const QUEX_TYPE_TOKEN_ID TKN_CASE           = ((QUEX_TYPE_TOKEN_ID)15);
const QUEX_TYPE_TOKEN_ID TKN_CATCH          = ((QUEX_TYPE_TOKEN_ID)16);
const QUEX_TYPE_TOKEN_ID TKN_CLASS          = ((QUEX_TYPE_TOKEN_ID)17);
const QUEX_TYPE_TOKEN_ID TKN_COLON          = ((QUEX_TYPE_TOKEN_ID)18);
const QUEX_TYPE_TOKEN_ID TKN_COMMA          = ((QUEX_TYPE_TOKEN_ID)19);
const QUEX_TYPE_TOKEN_ID TKN_COMPL          = ((QUEX_TYPE_TOKEN_ID)20);
const QUEX_TYPE_TOKEN_ID TKN_CONST          = ((QUEX_TYPE_TOKEN_ID)21);
const QUEX_TYPE_TOKEN_ID TKN_CONTINUE       = ((QUEX_TYPE_TOKEN_ID)22);
const QUEX_TYPE_TOKEN_ID TKN_DEDENT         = ((QUEX_TYPE_TOKEN_ID)3);
const QUEX_TYPE_TOKEN_ID TKN_DEFAULT        = ((QUEX_TYPE_TOKEN_ID)23);
const QUEX_TYPE_TOKEN_ID TKN_DEFINED        = ((QUEX_TYPE_TOKEN_ID)24);
const QUEX_TYPE_TOKEN_ID TKN_DELETE         = ((QUEX_TYPE_TOKEN_ID)25);
const QUEX_TYPE_TOKEN_ID TKN_DIV            = ((QUEX_TYPE_TOKEN_ID)26);
const QUEX_TYPE_TOKEN_ID TKN_DIV_ASSIGN     = ((QUEX_TYPE_TOKEN_ID)27);
const QUEX_TYPE_TOKEN_ID TKN_DO             = ((QUEX_TYPE_TOKEN_ID)28);
const QUEX_TYPE_TOKEN_ID TKN_DOT            = ((QUEX_TYPE_TOKEN_ID)29);
const QUEX_TYPE_TOKEN_ID TKN_DOUBLE_COLON   = ((QUEX_TYPE_TOKEN_ID)30);
const QUEX_TYPE_TOKEN_ID TKN_DOUBLE_HASH    = ((QUEX_TYPE_TOKEN_ID)31);
const QUEX_TYPE_TOKEN_ID TKN_DOUBLE_MINUS   = ((QUEX_TYPE_TOKEN_ID)32);
const QUEX_TYPE_TOKEN_ID TKN_DOUBLE_PLUS    = ((QUEX_TYPE_TOKEN_ID)33);
const QUEX_TYPE_TOKEN_ID TKN_ELLIPSIS       = ((QUEX_TYPE_TOKEN_ID)34);
const QUEX_TYPE_TOKEN_ID TKN_ELSE           = ((QUEX_TYPE_TOKEN_ID)35);
const QUEX_TYPE_TOKEN_ID TKN_ENUM           = ((QUEX_TYPE_TOKEN_ID)36);
const QUEX_TYPE_TOKEN_ID TKN_EQ             = ((QUEX_TYPE_TOKEN_ID)37);
const QUEX_TYPE_TOKEN_ID TKN_EXPLICIT       = ((QUEX_TYPE_TOKEN_ID)38);
const QUEX_TYPE_TOKEN_ID TKN_EXTERN         = ((QUEX_TYPE_TOKEN_ID)39);
const QUEX_TYPE_TOKEN_ID TKN_FAILURE        = ((QUEX_TYPE_TOKEN_ID)40);
const QUEX_TYPE_TOKEN_ID TKN_FAILURE_STRING = ((QUEX_TYPE_TOKEN_ID)41);
const QUEX_TYPE_TOKEN_ID TKN_FOR            = ((QUEX_TYPE_TOKEN_ID)42);
const QUEX_TYPE_TOKEN_ID TKN_FRIEND         = ((QUEX_TYPE_TOKEN_ID)43);
const QUEX_TYPE_TOKEN_ID TKN_GOTO           = ((QUEX_TYPE_TOKEN_ID)44);
const QUEX_TYPE_TOKEN_ID TKN_GREATER        = ((QUEX_TYPE_TOKEN_ID)45);
const QUEX_TYPE_TOKEN_ID TKN_GREATER_EQ     = ((QUEX_TYPE_TOKEN_ID)46);
const QUEX_TYPE_TOKEN_ID TKN_HASH           = ((QUEX_TYPE_TOKEN_ID)47);
const QUEX_TYPE_TOKEN_ID TKN_IDENTIFIER     = ((QUEX_TYPE_TOKEN_ID)48);
const QUEX_TYPE_TOKEN_ID TKN_IF             = ((QUEX_TYPE_TOKEN_ID)49);
const QUEX_TYPE_TOKEN_ID TKN_INDENT         = ((QUEX_TYPE_TOKEN_ID)2);
const QUEX_TYPE_TOKEN_ID TKN_INLINE         = ((QUEX_TYPE_TOKEN_ID)60);
const QUEX_TYPE_TOKEN_ID TKN_LESS           = ((QUEX_TYPE_TOKEN_ID)61);
const QUEX_TYPE_TOKEN_ID TKN_LESS_EQ        = ((QUEX_TYPE_TOKEN_ID)62);
const QUEX_TYPE_TOKEN_ID TKN_L_BRACE        = ((QUEX_TYPE_TOKEN_ID)63);
const QUEX_TYPE_TOKEN_ID TKN_L_PAREN        = ((QUEX_TYPE_TOKEN_ID)64);
const QUEX_TYPE_TOKEN_ID TKN_L_SHIFT        = ((QUEX_TYPE_TOKEN_ID)65);
const QUEX_TYPE_TOKEN_ID TKN_L_SHIFT_ASSIGN = ((QUEX_TYPE_TOKEN_ID)66);
const QUEX_TYPE_TOKEN_ID TKN_L_SQUARE       = ((QUEX_TYPE_TOKEN_ID)67);
const QUEX_TYPE_TOKEN_ID TKN_MINUS          = ((QUEX_TYPE_TOKEN_ID)68);
const QUEX_TYPE_TOKEN_ID TKN_MINUS_ASSIGN   = ((QUEX_TYPE_TOKEN_ID)69);
const QUEX_TYPE_TOKEN_ID TKN_MODULO         = ((QUEX_TYPE_TOKEN_ID)70);
const QUEX_TYPE_TOKEN_ID TKN_MODULO_ASSIGN  = ((QUEX_TYPE_TOKEN_ID)71);
const QUEX_TYPE_TOKEN_ID TKN_MULT           = ((QUEX_TYPE_TOKEN_ID)72);
const QUEX_TYPE_TOKEN_ID TKN_MULT_ASSIGN    = ((QUEX_TYPE_TOKEN_ID)73);
const QUEX_TYPE_TOKEN_ID TKN_MUTABLE        = ((QUEX_TYPE_TOKEN_ID)74);
const QUEX_TYPE_TOKEN_ID TKN_NAMESPACE      = ((QUEX_TYPE_TOKEN_ID)75);
const QUEX_TYPE_TOKEN_ID TKN_NEW            = ((QUEX_TYPE_TOKEN_ID)76);
const QUEX_TYPE_TOKEN_ID TKN_NODENT         = ((QUEX_TYPE_TOKEN_ID)4);
const QUEX_TYPE_TOKEN_ID TKN_NOT            = ((QUEX_TYPE_TOKEN_ID)77);
const QUEX_TYPE_TOKEN_ID TKN_NOT_EQ         = ((QUEX_TYPE_TOKEN_ID)78);
const QUEX_TYPE_TOKEN_ID TKN_NUMBER         = ((QUEX_TYPE_TOKEN_ID)79);
const QUEX_TYPE_TOKEN_ID TKN_OPERATOR       = ((QUEX_TYPE_TOKEN_ID)80);
const QUEX_TYPE_TOKEN_ID TKN_OR             = ((QUEX_TYPE_TOKEN_ID)81);
const QUEX_TYPE_TOKEN_ID TKN_OR_EQ          = ((QUEX_TYPE_TOKEN_ID)82);
const QUEX_TYPE_TOKEN_ID TKN_PLUS           = ((QUEX_TYPE_TOKEN_ID)83);
const QUEX_TYPE_TOKEN_ID TKN_PLUS_ASSIGN    = ((QUEX_TYPE_TOKEN_ID)84);
const QUEX_TYPE_TOKEN_ID TKN_PP_DEFINE      = ((QUEX_TYPE_TOKEN_ID)50);
const QUEX_TYPE_TOKEN_ID TKN_PP_ELIF        = ((QUEX_TYPE_TOKEN_ID)52);
const QUEX_TYPE_TOKEN_ID TKN_PP_ELSE        = ((QUEX_TYPE_TOKEN_ID)56);
const QUEX_TYPE_TOKEN_ID TKN_PP_ENDIF       = ((QUEX_TYPE_TOKEN_ID)55);
const QUEX_TYPE_TOKEN_ID TKN_PP_ERROR       = ((QUEX_TYPE_TOKEN_ID)58);
const QUEX_TYPE_TOKEN_ID TKN_PP_FINISH      = ((QUEX_TYPE_TOKEN_ID)85);
const QUEX_TYPE_TOKEN_ID TKN_PP_IF          = ((QUEX_TYPE_TOKEN_ID)51);
const QUEX_TYPE_TOKEN_ID TKN_PP_IFDEF       = ((QUEX_TYPE_TOKEN_ID)53);
const QUEX_TYPE_TOKEN_ID TKN_PP_IFNDEF      = ((QUEX_TYPE_TOKEN_ID)54);
const QUEX_TYPE_TOKEN_ID TKN_PP_INCLUDE     = ((QUEX_TYPE_TOKEN_ID)86);
const QUEX_TYPE_TOKEN_ID TKN_PP_PRAGMA      = ((QUEX_TYPE_TOKEN_ID)57);
const QUEX_TYPE_TOKEN_ID TKN_PP_UNDEF       = ((QUEX_TYPE_TOKEN_ID)59);
const QUEX_TYPE_TOKEN_ID TKN_PRIVATE        = ((QUEX_TYPE_TOKEN_ID)87);
const QUEX_TYPE_TOKEN_ID TKN_PROTECT        = ((QUEX_TYPE_TOKEN_ID)88);
const QUEX_TYPE_TOKEN_ID TKN_PUBLIC         = ((QUEX_TYPE_TOKEN_ID)89);
const QUEX_TYPE_TOKEN_ID TKN_QUESTION       = ((QUEX_TYPE_TOKEN_ID)90);
const QUEX_TYPE_TOKEN_ID TKN_QUOTED_CHAR    = ((QUEX_TYPE_TOKEN_ID)91);
const QUEX_TYPE_TOKEN_ID TKN_REGISTER       = ((QUEX_TYPE_TOKEN_ID)92);
const QUEX_TYPE_TOKEN_ID TKN_RETURN         = ((QUEX_TYPE_TOKEN_ID)93);
const QUEX_TYPE_TOKEN_ID TKN_R_BRACE        = ((QUEX_TYPE_TOKEN_ID)94);
const QUEX_TYPE_TOKEN_ID TKN_R_PAREN        = ((QUEX_TYPE_TOKEN_ID)95);
const QUEX_TYPE_TOKEN_ID TKN_R_SHIFT        = ((QUEX_TYPE_TOKEN_ID)96);
const QUEX_TYPE_TOKEN_ID TKN_R_SHIFT_ASSIGN = ((QUEX_TYPE_TOKEN_ID)97);
const QUEX_TYPE_TOKEN_ID TKN_R_SQUARE       = ((QUEX_TYPE_TOKEN_ID)98);
const QUEX_TYPE_TOKEN_ID TKN_SEMICOLON      = ((QUEX_TYPE_TOKEN_ID)99);
const QUEX_TYPE_TOKEN_ID TKN_SIZEOF         = ((QUEX_TYPE_TOKEN_ID)100);
const QUEX_TYPE_TOKEN_ID TKN_STATIC         = ((QUEX_TYPE_TOKEN_ID)101);
const QUEX_TYPE_TOKEN_ID TKN_STRING         = ((QUEX_TYPE_TOKEN_ID)102);
const QUEX_TYPE_TOKEN_ID TKN_STRUCT         = ((QUEX_TYPE_TOKEN_ID)103);
const QUEX_TYPE_TOKEN_ID TKN_SWITCH         = ((QUEX_TYPE_TOKEN_ID)104);
const QUEX_TYPE_TOKEN_ID TKN_TEMPLATE       = ((QUEX_TYPE_TOKEN_ID)105);
const QUEX_TYPE_TOKEN_ID TKN_TERMINATION    = ((QUEX_TYPE_TOKEN_ID)0);
const QUEX_TYPE_TOKEN_ID TKN_THIS           = ((QUEX_TYPE_TOKEN_ID)106);
const QUEX_TYPE_TOKEN_ID TKN_THROW          = ((QUEX_TYPE_TOKEN_ID)107);
const QUEX_TYPE_TOKEN_ID TKN_TRY            = ((QUEX_TYPE_TOKEN_ID)108);
const QUEX_TYPE_TOKEN_ID TKN_TYPEDEF        = ((QUEX_TYPE_TOKEN_ID)109);
const QUEX_TYPE_TOKEN_ID TKN_TYPEID         = ((QUEX_TYPE_TOKEN_ID)110);
const QUEX_TYPE_TOKEN_ID TKN_TYPENAME       = ((QUEX_TYPE_TOKEN_ID)111);
const QUEX_TYPE_TOKEN_ID TKN_UNINITIALIZED  = ((QUEX_TYPE_TOKEN_ID)1);
const QUEX_TYPE_TOKEN_ID TKN_UNION          = ((QUEX_TYPE_TOKEN_ID)112);
const QUEX_TYPE_TOKEN_ID TKN_USING          = ((QUEX_TYPE_TOKEN_ID)113);
const QUEX_TYPE_TOKEN_ID TKN_VIRTUAL        = ((QUEX_TYPE_TOKEN_ID)114);
const QUEX_TYPE_TOKEN_ID TKN_VOLATILE       = ((QUEX_TYPE_TOKEN_ID)115);
const QUEX_TYPE_TOKEN_ID TKN_WHILE          = ((QUEX_TYPE_TOKEN_ID)116);
const QUEX_TYPE_TOKEN_ID TKN_XOR            = ((QUEX_TYPE_TOKEN_ID)117);
const QUEX_TYPE_TOKEN_ID TKN_XOR_EQ         = ((QUEX_TYPE_TOKEN_ID)118);


QUEX_NAMESPACE_TOKEN_OPEN
extern const char* QUEX_NAME_TOKEN(map_id_to_name)(const QUEX_TYPE_TOKEN_ID TokenID);
QUEX_NAMESPACE_TOKEN_CLOSE

#endif /* __QUEX_INCLUDE_GUARD__AUTO_TOKEN_IDS___QUEX____TOKEN__ */
