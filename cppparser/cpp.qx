// -*- C++ -*- vim: set syntax=cpp:
start = PROGRAM;


define {
    // Pattern definitions for example application
    P_WHITESPACE          [ \r\t\n]+
    P_IDENTIFIER          [_a-zA-Z][_a-zA-Z0-9]*
    P_NUMBER              [0-9]+
    //
    // String: 
    //    Quote " followe by either \" or something different from " and then a final "
    P_STRING              "\""(\\"\""|[^"])*"\""
    P_QUOTED_CHAR_1       ("'\\''")|("'"[^']?"'")
    P_QUOTED_CHAR_2       "'\\"[0-9abcfnrtv\\]"'"
    P_QUOTED_CHAR         ({P_QUOTED_CHAR_1}|{P_QUOTED_CHAR_2})
    P_INCLUDE_FILE1       "<"[^>]+">"
    P_INCLUDE_FILE2       "\""[^"]+"\""
	
	P_DOUBLE_COLON        "::"
}



mode PROGRAM :
<skip:       [ \r\n\t]>
<skip_range: "/*" "*/">
<skip_range: "//" "\n">
{
	on_end_of_stream => TKN_TERMINATION(LexemeNull);
    on_failure       => TKN_FAIL(Lexeme);


    "#"[ \t]*"include"[ \t]*{P_INCLUDE_FILE2} => TKN_PP_INCLUDE(Lexeme);
    "#"[ \t]*"include"[ \t]*{P_INCLUDE_FILE1} => TKN_PP_INCLUDE(Lexeme);
    "#"[ \t]*"define"  { self<<PREPROCESSOR; self_send1(TKN_PP_DEFINE, Lexeme);}
    "#"[ \t]*"if"      { self<<PREPROCESSOR; self_send1(TKN_PP_IF, Lexeme);}
    "#"[ \t]*"elif"    { self<<PREPROCESSOR; self_send1(TKN_PP_ELIF, Lexeme);}
    "#"[ \t]*"ifdef"   { self<<PREPROCESSOR; self_send1(TKN_PP_IFDEF, Lexeme);}
    "#"[ \t]*"ifndef"  { self<<PREPROCESSOR; self_send1(TKN_PP_IFNDEF, Lexeme);}
    "#"[ \t]*"endif"   { self<<PREPROCESSOR; self_send1(TKN_PP_ENDIF, Lexeme);}
    "#"[ \t]*"else"    { self<<PREPROCESSOR; self_send1(TKN_PP_ELSE, Lexeme);}
    "#"[ \t]*"pragma"  { self<<PREPROCESSOR; self_send1(TKN_PP_PRAGMA, Lexeme);}
    "#"[ \t]*"error"   { self<<PREPROCESSOR; self_send1(TKN_PP_ERROR, Lexeme);}
    defined            => TKN_PP_DEFINED(Lexeme);
    "\\\n"             {}


    "#"           => TKN_HASH(Lexeme);
    "##"          => TKN_DOUBLE_HASH(Lexeme);
    "?"           => TKN_QUESTION_MARK(Lexeme);
    "~"           => TKN_TILDE(Lexeme);
    "("           => TKN_BRACKET_O(Lexeme);
    ")"           => TKN_BRACKET_C(Lexeme);
    "["           => TKN_CORNER_BRACKET_O(Lexeme);
    "]"           => TKN_CORNER_BRACKET_C(Lexeme);
    "{"           => TKN_CURLY_BRACKET_O(Lexeme);
    "}"           => TKN_CURLY_BRACKET_C(Lexeme);
    "="           => TKN_OP_ASSIGNMENT(Lexeme);
    "+"           => TKN_PLUS(Lexeme);
    "-"           => TKN_MINUS(Lexeme);
    "*"           => TKN_MULT(Lexeme);
    "/"           => TKN_DIV(Lexeme);
    "%"           => TKN_MODULO(Lexeme);
    "+="          => TKN_ASSIGN_PLUS(Lexeme);
    "-="          => TKN_ASSIGN_MINUS(Lexeme);
    "*="          => TKN_ASSIGN_MULT(Lexeme);
    "/="          => TKN_ASSIGN_DIV(Lexeme);
    "=="          => TKN_EQ(Lexeme);
    "!="          => TKN_NOT_EQ(Lexeme);
    ">"           => TKN_GREATER(Lexeme);
    ">="          => TKN_GR_EQ(Lexeme);
    "<"           => TKN_LESS(Lexeme);
    "<="          => TKN_LE_EQ(Lexeme);
    "!"           => TKN_NOT(Lexeme);
    "|"           => TKN_LOGICAL_OR(Lexeme);
    "^"           => TKN_EXCLUSIVE_OR(Lexeme);
    "||"          => TKN_OR(Lexeme);
    "&"           => TKN_AMPERSANT(Lexeme);
    "&&"          => TKN_AND(Lexeme);
	":"           => TKN_COLON(Lexeme);
    "::"          => TKN_DOUBLE_COLON(Lexeme);

    struct        => TKN_STRUCT(Lexeme);
    const         => TKN_CONST(Lexeme);
    if            => TKN_IF(Lexeme);
    else          => TKN_ELSE(Lexeme);
    switch        => TKN_SWITCH(Lexeme);
    for           => TKN_FOR(Lexeme);
    do            => TKN_DO(Lexeme);
    while         => TKN_WHILE(Lexeme);
    break         => TKN_BREAK(Lexeme);
    continue      => TKN_CONTINUE(Lexeme);
	class         => TKN_CLASS(Lexeme);
	template      => TKN_TEMPLATE(Lexeme);
	extern        => TKN_EXTERN(Lexeme);
    ";"           => TKN_SEMICOLON(Lexeme);
    "."           => TKN_DOT(Lexeme);
    ","           => TKN_COMMA(Lexeme);
	return		  => TKN_RETURN(Lexeme);
	public        => TKN_PUBLIC(Lexeme);
	protect       => TKN_PROTECT(Lexeme);
	private       => TKN_PRIVATE(Lexeme);
	delete        => TKN_DELETE(Lexeme);
	friend        => TKN_FRIEND(Lexeme);
	namespace     => TKN_NAMESPACE(Lexeme);
	new           => TKN_NEW(Lexeme);
	__asm         => TKN_ASM(Lexeme);
	union         => TKN_UNION(Lexeme);
	virtual       => TKN_VIRTUAL(Lexeme);
	typename      => TKN_TYPENAME(Lexeme);  
	using         => TKN_USING(Lexeme);
    static        => TKN_STATIC(Lexeme);
    operator      => TKN_OPERATOR(Lexeme);
    inline        => TKN_INLINE(Lexeme);
	enum          => TKN_ENUM(Lexeme);
	typedef       => TKN_TYPEDEF(Lexeme);
	volatile      => TKN_VOLATILE(Lexeme);
	

    {P_IDENTIFIER}  => TKN_IDENTIFIER(Lexeme);
    {P_NUMBER}      => TKN_NUMBER(Lexeme);
    {P_STRING}      => TKN_STRING(Lexeme);
    {P_QUOTED_CHAR} => TKN_QUOTED_CHAR(Lexeme);
	//{P_WHITESPACE}    {}
	
	

}

mode PREPROCESSOR:

<skip:       [ \r\t]>
<skip_range: "/*" "*/">
{
    <<EOF>>       => TKN_TERMINATION(Lexeme);
    defined       => TKN_PP_DEFINED(Lexeme);

    "#"           => TKN_HASH(Lexeme);
    "##"          => TKN_DOUBLE_HASH(Lexeme);
    "?"           => TKN_QUESTION_MARK(Lexeme);
    "~"           => TKN_TILDE(Lexeme);
    "("           => TKN_BRACKET_O(Lexeme);
    ")"           => TKN_BRACKET_C(Lexeme);
    "["           => TKN_CORNER_BRACKET_O(Lexeme);
    "]"           => TKN_CORNER_BRACKET_C(Lexeme);
    "{"           => TKN_CURLY_BRACKET_O(Lexeme);
    "}"           => TKN_CURLY_BRACKET_C(Lexeme);
    "="           => TKN_OP_ASSIGNMENT(Lexeme);
    "+"           => TKN_PLUS(Lexeme);
    "-"           => TKN_MINUS(Lexeme);
    "*"           => TKN_MULT(Lexeme);
    "/"           => TKN_DIV(Lexeme);
    "%"           => TKN_MODULO(Lexeme);
    "+="          => TKN_ASSIGN_PLUS(Lexeme);
    "-="          => TKN_ASSIGN_MINUS(Lexeme);
    "*="          => TKN_ASSIGN_MULT(Lexeme);
    "/="          => TKN_ASSIGN_DIV(Lexeme);
    "=="          => TKN_EQ(Lexeme);
    "!="          => TKN_NOT_EQ(Lexeme);
    ">"           => TKN_GREATER(Lexeme);
    ">="          => TKN_GR_EQ(Lexeme);
    "<"           => TKN_LESS(Lexeme);
    "<="          => TKN_LE_EQ(Lexeme);
    "!"           => TKN_NOT(Lexeme);
    "|"           => TKN_LOGICAL_OR(Lexeme);
    "^"           => TKN_EXCLUSIVE_OR(Lexeme);
    "||"          => TKN_OR(Lexeme);
    "&"           => TKN_AMPERSANT(Lexeme);
    "&&"          => TKN_AND(Lexeme);
    ":"           => TKN_COLON(Lexeme);
	"::"          => TKN_DOUBLE_COLON(Lexeme);
    ";"           => TKN_SEMICOLON(Lexeme);
    "."           => TKN_DOT(Lexeme);
    ","           => TKN_COMMA(Lexeme);

    {P_IDENTIFIER}  => TKN_IDENTIFIER(Lexeme);
    {P_NUMBER}      => TKN_NUMBER(Lexeme);
    {P_STRING}      => TKN_STRING(Lexeme);
    {P_QUOTED_CHAR} => TKN_QUOTED_CHAR(Lexeme);

    "//"[^\n]*"\n"      { self<<PROGRAM; self_send1(TKN_PP_FINISH, Lexeme);}
	"\n"                { self<<PROGRAM; self_send1(TKN_PP_FINISH, Lexeme);}
	"\\\n"              {}
	"\\\r\n"            {}
}
