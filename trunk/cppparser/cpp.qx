// -*- C++ -*- vim: set syntax=cpp:
// reference website: 
// keyword:      http://www.cppreference.com/wiki/keywords/start
// preprocessor: http://www.cppreference.com/wiki/preprocessor/start
// operator:     http://www.cppreference.com/wiki/operator_precedence
// other   :     clang source code:  llvm\tools\clang\include\clang\Basic\TokenKinds.def
start = PROGRAM;

define {
    // Pattern definitions for example application
    P_WHITESPACE          [ \r\t\n]+
    P_IDENTIFIER          [_a-zA-Z][_a-zA-Z0-9]*
    P_NUMBER              [0-9]+
    //
    // String:
    //    Quote " followe by either \" or something different from " and then a final "
    P_STRING              "\""(\\"\""|\\\r\n|\\\n|[^"\n])*"\""
    P_QUOTED_CHAR_1       ("'\\''")|("'"[^']?"'")
    P_QUOTED_CHAR_2       "'\\"[0-9abcfnrtv\\]"'"
    P_QUOTED_CHAR         ({P_QUOTED_CHAR_1}|{P_QUOTED_CHAR_2})
    P_INCLUDE_FILE1       "<"[^>]+">"
    P_INCLUDE_FILE2       "\""[^"]+"\""

    exponent_part         [eE][\-+]?[0-9]+
    fractional_constant   ([0-9]*"."[0-9]+)|([0-9]+".")
    floating_constant     (({fractional_constant}{exponent_part}?)|([0-9]+{exponent_part}))[FfLl]?

    integer_suffix_opt    ([uU]?[lL]?)|([lL][uU])
    decimal_constant      [1-9][0-9]*{integer_suffix_opt}
    octal_constant        "0"[0-7]*{integer_suffix_opt}
    hex_constant          "0"[xX][0-9a-fA-F]+{integer_suffix_opt}
}

token {

 
    PP_DEFINE           = 50;
    PP_IF               = 51;
    PP_ELIF             = 52;
    PP_IFDEF            = 53;
    PP_IFNDEF           = 54;
    PP_ENDIF            = 55;
    PP_ELSE             = 56;
    PP_PRAGMA           = 57;
    PP_ERROR            = 58;
    PP_UNDEF            = 59;
    
    FAILURE_STRING;
    FAILURE;
    STRING;
    
    
    
}

mode EOF_AND_FAILURE:
<inheritable: only>
{
    on_end_of_stream => TKN_TERMINATION(LexemeNull);
    on_failure {
                for(QUEX_TYPE_CHARACTER * iterator = LexemeEnd;
                    iterator >= LexemeBegin && *iterator != '\n';
                    --iterator) { 
                    std::cout<<"current char = "<<*iterator<<std::endl;
                    if( *iterator == '\"' ){ 
                        self_send(TKN_FAILURE_STRING);
                        RETURN;
                    } 
                }
                self_send(TKN_FAILURE);
                RETURN;
    }
}

mode OPERATORS:
<inheritable: only>
{

    "("       =>     TKN_L_PAREN();
    ")"       =>     TKN_R_PAREN();
    "{"       =>     TKN_L_BRACE();
    "}"       =>     TKN_R_BRACE();
    "["       =>     TKN_L_SQUARE();
    "]"       =>     TKN_R_SQUARE(); 
                     
    "."       =>     TKN_DOT();
    "..."     =>     TKN_ELLIPSIS();
    ":"       =>     TKN_COLON();
    "::"      =>     TKN_DOUBLE_COLON();
    ";"       =>     TKN_SEMICOLON();
    ","       =>     TKN_COMMA();
    "?"       =>     TKN_QUESTION();
    "->"      =>     TKN_ARROW();

    //assignment
    "="       =>     TKN_ASSIGN();
    "+"       =>     TKN_PLUS();
    "+="      =>     TKN_PLUS_ASSIGN();
    "++"      =>     TKN_DOUBLE_PLUS();
    "-"       =>     TKN_MINUS();
    "--"      =>     TKN_DOUBLE_MINUS();
    "-="      =>     TKN_MINUS_ASSIGN();
                     
    "*"       =>     TKN_MULT();
    "*="      =>     TKN_MULT_ASSIGN();
    "/"       =>     TKN_DIV();
    "/="      =>     TKN_DIV_ASSIGN();
    "%"       =>     TKN_MODULO();
    "%="      =>     TKN_MODULO_ASSIGN();
    
    // shift
    "<<"      =>     TKN_L_SHIFT();
    "<<="     =>     TKN_L_SHIFT_ASSIGN();
    ">>"      =>     TKN_R_SHIFT();
    ">>="     =>     TKN_R_SHIFT_ASSIGN();
    
    // bitwise or logic operator
    "=="      =>     TKN_EQ();
    eq        =>     TKN_EQ();
                     
    ">"       =>     TKN_GREATER();
    ">="      =>     TKN_GREATER_EQ();
    "<"       =>     TKN_LESS();
    "<="      =>     TKN_LESS_EQ();
                     
    "!"       =>     TKN_NOT();
    not       =>     TKN_NOT();
    "!="      =>     TKN_NOT_EQ();
    not_eq    =>     TKN_NOT_EQ();
              
    "|"       =>     TKN_BITOR();
    bitor     =>     TKN_BITOR();
    "||"      =>     TKN_OR();
    or        =>     TKN_OR();
    "|="      =>     TKN_OR_EQ(); 
    or_eq     =>     TKN_OR_EQ();
                     
    "^"       =>     TKN_XOR();
    xor       =>     TKN_XOR();
    "^="      =>     TKN_XOR_EQ();
    xor_equ   =>     TKN_XOR_EQ();
                     
    "~"       =>     TKN_COMPL();
    compl     =>     TKN_COMPL();
    
    "&"       =>     TKN_BITAND();
    bitand    =>     TKN_BITAND();
    "&&"      =>     TKN_AND();
    and       =>     TKN_AND();
    "&="      =>     TKN_AND_EQ();
    and_eq    =>     TKN_AND_EQ();
    

}

mode VAR_LEXEMES :
<inheritable: only>
{

    extern        => TKN_EXTERN();
    explicit      => TKN_EXPLICIT();
    const         => TKN_CONST();
    friend        => TKN_FRIEND();
    virtual       => TKN_VIRTUAL();
    volatile      => TKN_VOLATILE();
    static        => TKN_STATIC();
    inline        => TKN_INLINE();
    auto          => TKN_AUTO();
    register      => TKN_REGISTER();
    mutable       => TKN_MUTABLE();
    
    if            => TKN_IF();
    else          => TKN_ELSE();
    switch        => TKN_SWITCH();
    for           => TKN_FOR();
    do            => TKN_DO();
    while         => TKN_WHILE();
    
    namespace     => TKN_NAMESPACE();
    class         => TKN_CLASS();
    struct        => TKN_STRUCT();
    template      => TKN_TEMPLATE();
    union         => TKN_UNION();
    enum          => TKN_ENUM();
    try           => TKN_TRY();
    catch         => TKN_CATCH();
        
    public        => TKN_PUBLIC();
    protect       => TKN_PROTECT();
    private       => TKN_PRIVATE();
   
    new           => TKN_NEW();
    delete        => TKN_DELETE();
    continue      => TKN_CONTINUE();
    return        => TKN_RETURN();
    case          => TKN_CASE();
    default       => TKN_DEFAULT();
    break         => TKN_BREAK();
    goto          => TKN_GOTO(); 
    sizeof        => TKN_SIZEOF();
    throw         => TKN_THROW();
    
    using         => TKN_USING();
    asm           => TKN_ASM();
    __asm         => TKN_ASM_EXT();
    typedef       => TKN_TYPEDEF();
    typeid        => TKN_TYPEID();
    this          => TKN_THIS();
    
    typename      => TKN_TYPENAME();
    operator      => TKN_OPERATOR();
    
    {P_IDENTIFIER}      => TKN_IDENTIFIER(Lexeme);
    {P_NUMBER}          => TKN_NUMBER(Lexeme);
    {P_STRING}          => TKN_STRING(Lexeme);
    {P_QUOTED_CHAR}     => TKN_QUOTED_CHAR(Lexeme);

    {decimal_constant}  => TKN_NUMBER(Lexeme);
    {octal_constant}    => TKN_NUMBER(Lexeme);
    {hex_constant}      => TKN_NUMBER(Lexeme);
    {floating_constant} => TKN_NUMBER(Lexeme);
}


mode PROGRAM : OPERATORS,
VAR_LEXEMES,
EOF_AND_FAILURE
<skip:       [ \r\n\t]>
<skip_range: "/*" "*/">
<skip_range: "//" "\n">
{
    "#"[ \t]*"include"[ \t]*{P_INCLUDE_FILE2} => TKN_PP_INCLUDE(Lexeme);
    "#"[ \t]*"include"[ \t]*{P_INCLUDE_FILE1} => TKN_PP_INCLUDE(Lexeme);
    "#"[ \t]*"define"                         => GOTO(PREPROCESSOR, TKN_PP_DEFINE());
    "#"[ \t]*"if"                             => GOTO(PREPROCESSOR, TKN_PP_IF());
    "#"[ \t]*"elif"                           => GOTO(PREPROCESSOR, TKN_PP_ELIF());
    "#"[ \t]*"ifdef"                          => GOTO(PREPROCESSOR, TKN_PP_IFDEF());
    "#"[ \t]*"ifndef"                         => GOTO(PREPROCESSOR, TKN_PP_IFNDEF());
    "#"[ \t]*"endif"                          => GOTO(PREPROCESSOR, TKN_PP_ENDIF());
    "#"[ \t]*"else"                           => GOTO(PREPROCESSOR, TKN_PP_ELSE());
    "#"[ \t]*"pragma"                         => GOTO(PREPROCESSOR, TKN_PP_PRAGMA());
    "#"[ \t]*"error"                          => GOTO(PREPROCESSOR, TKN_PP_ERROR());
    "#"[ \t]*"undef"                          => GOTO(PREPROCESSOR, TKN_PP_UNDEF());
    "\\\n"        {}

    
    {P_IDENTIFIER}  PRIORITY-MARK;
}

mode PREPROCESSOR : OPERATORS,
VAR_LEXEMES,
EOF_AND_FAILURE
<skip:       [ \r\t]>
<skip_range: "/*" "*/">
{
    defined          => TKN_PP_DEFINED();
    "#"              => TKN_HASH();         // # and ## only exist in preprocessor
    "##"             => TKN_DOUBLE_HASH();
    "//"[^\n]*"\n"   => GOTO(PROGRAM, TKN_PP_FINISH);
    "\n"             => GOTO(PROGRAM, TKN_PP_FINISH);
    "\\\n"           {}
    "\\\r\n"         {}
    {P_IDENTIFIER}   PRIORITY-MARK;
}
